// generated by jsonenums -type=OperationType; DO NOT EDIT

package grammar

import (
	"encoding/json"
	"fmt"
)

var (
	_OperationTypeNameToValue = map[string]OperationType{
		"OpUnknown":  OpUnknown,
		"OpQuery":    OpQuery,
		"OpMutation": OpMutation,
	}

	_OperationTypeValueToName = map[OperationType]string{
		OpUnknown:  "OpUnknown",
		OpQuery:    "OpQuery",
		OpMutation: "OpMutation",
	}
)

func init() {
	var v OperationType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OperationTypeNameToValue = map[string]OperationType{
			interface{}(OpUnknown).(fmt.Stringer).String():  OpUnknown,
			interface{}(OpQuery).(fmt.Stringer).String():    OpQuery,
			interface{}(OpMutation).(fmt.Stringer).String(): OpMutation,
		}
	}
}

func (r OperationType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OperationTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OperationType: %d", r)
	}
	return json.Marshal(s)
}

func (r *OperationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OperationType should be a string, got %s", data)
	}
	v, ok := _OperationTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OperationType %q", s)
	}
	*r = v
	return nil
}
